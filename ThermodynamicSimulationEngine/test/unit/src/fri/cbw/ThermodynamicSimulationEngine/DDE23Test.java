/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package fri.cbw.ThermodynamicSimulationEngine;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Ignore;

/**
 *.
 * TODO: decide whether to use arrays or lists in DDE23 class and modify tests
 *       accordingly
 * TODO: getting more than one value with function ddeval does not have a test and
 *       is likely to fail; unsorted.
 */
public class DDE23Test {

    public DDE23Test() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * First example from dde23 tutorial.
     * Equations
        y1'(t) = y1(t − 1)
        y2'(t) = y1(t − 1) + y2 (t − 0.2)
        y3'(t) = y2(t)
        are to be solved on [0, 5] with history y1(t) = 1, y2(t) = 1, y3(t) = 1 for t ≤ 0.
     * Solution in Octave (http://math.la.asu.edu/~kuang/class/ddemfile.htm)
        function v = exam1f(t,y,Z)
            ylag1 = Z(:,1);
            ylag2 = Z(:,2);
            v = zeros(3,1);
            v(1)=ylag1(1);
            v(2)=ylag1(1) +y(2);
            v(3)=ylag2(2);
        end
        function v = exam1h(t)
            v = ones(3,1);
        end
        sol = dde23(@exam1f,[1, 0.2],ones(3,1),[0, 5]);
        plot(sol.x, sol.y)
    */
    @Test
    public void testIntegrateExample1() {
        final double delta = 1e-3; // FIXME: this might be too generous, relative error?
                                      // actually, 1e-6 was insufficiently generous since
                                      // data from octave is rounded
        DDE23.FirstOrderDelayDifferentialEquations ddes = new DDE23.FirstOrderDelayDifferentialEquations(){
            @Override
            public void computeDerivatives(double t, double[] y, double[][] Z, double[] yPrime) {
                double[] ylag1 = Z[0];
                double[] ylag2 = Z[1];
                yPrime[0] = ylag1[0];
                yPrime[1] = ylag1[0] + y[1]; // FIXME: gets out of bounds here
                yPrime[2] = ylag2[1];
            }
            @Override
            public int getDimension() {
                return 3;
            }
        };
        double[] lags = {1.0, 0.2};
        double[] history = {1.0, 1.0, 1.0};
        double tspan = 5.0;
        DDE23.IntegrationResult result = DDE23.integrate(ddes, lags, history, 0, tspan);
        List<Double> resultX = result.getXs();
        List<double[]> resultY = result.getYs();
        List<Double> expectedX = new ArrayList<Double>(Arrays.asList(0.00000,
   0.04000,   0.20000,   0.40000,   0.60000,   0.80000,   1.00000,   1.20000,   1.40000,
   1.60000,   1.80000,   2.00000,   2.20000,   2.40000,   2.60000,   2.80000,   3.00000,
   3.20000,   3.40000,   3.60000,   3.80000,   4.00000,   4.20000,   4.40000,   4.60000,
   4.80000,   5.00000));
        List<Double> expectedY1 = new ArrayList<Double>(Arrays.asList(1.0000,
    1.0400,    1.2000,    1.4000,    1.6000,    1.8000,    2.0000,    2.2200,    2.4800,
    2.7800,    3.1200,    3.5000,    3.9213,    4.3907,    4.9160,    5.5053,    6.1667,
    6.9081,    7.7384,    8.6680,    9.7090,   10.8750,   12.1810,   13.6441,   15.2830,
   17.1187,   19.1749));
        List<Double> expectedY2 = new ArrayList<Double>(Arrays.asList(1.0000,
     1.0816,     1.4427,     1.9834,     2.6437,     3.4502,     4.4352,     5.6595,     7.1991,
     9.1237,    11.5185,    14.4877,    18.1597,    22.6974,    28.3013,    35.2162,    43.7410,
    54.2412,    67.1636,    83.0559,   102.5886,   126.5825,   156.0418,   192.1949,   236.5441,
   290.9266,   357.5892));
        List<Double> expectedY3 = new ArrayList<Double>(Arrays.asList(1.0000,
     1.0400,     1.2000,     1.4428,     1.7836,     2.2441,     2.8508,     3.6360,     4.6407,
     5.9207,     7.5458,     9.6013,    12.1913,    15.4429,    19.5125,    24.5925,    30.9198,
    38.7856,    48.5471,    60.6425,    75.6092,    94.1060,   116.9402,   145.1010,   179.8003,
   222.5219,   275.0825
        ));
        assertEquals(resultX.size(), resultY.size());
        assertEquals(expectedX.size(), resultX.size());
        for(int i=0; i < resultX.size(); i++) {
            assertEquals(expectedX.get(i), resultX.get(i), delta);
            double[] actualY = resultY.get(i);
            assertEquals(expectedY1.get(i), actualY[0], delta);
            assertEquals(expectedY2.get(i), actualY[1], delta);
            assertEquals(expectedY3.get(i), actualY[2], delta);
        }
    }

    /**
     * First example from pyode tutorial.
     * Nicholson’s (1954) blowfly model from Gurney and Nisbet (1981),
     * originally a Solv95 example.
     */
    @Test
    public void testIntegrateBlowfly() {
        final double delta = 1e-6;
        DDE23.FirstOrderDelayDifferentialEquations ddes = new DDE23.FirstOrderDelayDifferentialEquations(){
            @Override
            public void computeDerivatives(double t, double[] y, double[][] Z, double[] yPrime) {
                double[] c = {12.0, 0.25, 10.0, 300.0, 100.0};
                double alag = 0.0;
                if (t > c[0]) {
                    alag = Z[0][0];
                }
                yPrime[0] = c[2]*alag*Math.exp(-alag/c[3])-c[1]*y[0];
            }
            @Override
            public int getDimension() {
                return 1;
            }
        };
        double[] lags = {12.0};
        double[] history = {300.0};
        double tspan = 300.0;
        DDE23.IntegrationResult result = DDE23.integrate(ddes, lags, history, 0, tspan);
        List<Double> resultX = result.getXs();
        List<double[]> resultY = result.getYs();
        List<Double> expectedX = new ArrayList<Double>(Arrays.asList(
0.0,0.32,1.51573364207,2.82484713943,4.15209467552 ,
5.48233714288,6.81307684588,8.1438991748,9.47473523569,10.7373676178 ,
12.0,12.0001610953,12.0003221905,12.0011276668,12.005155048 ,
12.0252919543,12.1259764857,12.6293991427,14.5804474605,15.8712466446 ,
17.1620458286,18.3806221983,19.6420910956,20.99153417,22.4600479828 ,
24.0,24.0581185995,24.116237199,24.2066899874,24.3150199309 ,
24.4556024223,24.6651891916,24.9596258682,25.2540625447,25.5767938884 ,
25.9674717447,26.4657772796,27.147366225,28.2347664117,29.9963508671 ,
31.7579353225,33.0739384351,34.0243668337,34.9747952323,35.4873976162 ,
36.0,36.3963720692,36.693404561,36.9904370527,37.3663417954 ,
37.8293516821,38.3379631798,38.87262143,39.4565514071,40.1619462819 ,
41.1123257945,42.0627053071,42.8819643847,43.7378849471,44.6895008257 ,
45.9074400734,48.3571795742,49.7786296632,50.7768185734,51.5459438285 ,
52.3150690835,53.206674492,54.0585266403,54.7758980404,55.6240683823 ,
56.9161793657,58.6520300104,60.1054281607,61.4664361588,62.8055081902 ,
64.1397204131,65.4765826842,66.5080244649,67.1206154581,67.7332064513 ,
68.2467529577,68.6789505142,69.0919852749,69.5132353136,69.963862392 ,
70.4835718298,71.1611485703,72.0492343882,72.9373202061,73.7440906529 ,
74.5726447227,75.4840688957,76.5470665294,77.9151775796,78.8827996372 ,
79.8504216948,80.7787336767,81.5434804858,81.9433516505,82.3432228152 ,
82.915575522,83.4934350516,84.3435735742,85.0429388003,85.6921404849 ,
86.4635978022,87.576297608,89.1278372999,90.6793769918,92.0627321826 ,
93.4070897292,94.7238603332,96.0716535633,97.4723526542,98.1356394322 ,
98.6124310733,99.0892227145,99.5199565704,99.9341102581,100.354780835 ,
100.809424353,101.337198454,102.017545912,102.908135149,103.798724386 ,
104.602050284,105.43662089,106.353960373,107.426039601,108.808819959 ,
109.886775794,110.964731628,111.830776344,112.611873581,113.184640003 ,
113.757406425,114.338047507,115.031131069,115.724214631,116.363522781 ,
117.095087825,118.089238629,121.811680716,122.846490823,123.881300929 ,
125.15367842,126.478536628,127.851143075,128.560527711,129.100741833 ,
129.640955955,130.097393053,130.512083208,130.90452187,131.30444522 ,
131.734577868,132.229613186,132.883110053,133.609400504,134.335690955 ,
135.105869208,135.928441555,136.833381532,137.883683496,139.217502925 ,
140.544048086,141.41038498,142.276721874,143.039231407,143.642922765 ,
144.246614124,144.785650733,145.399502611,146.021333352,146.643164092 ,
147.287919992,148.082664839,149.299661911,151.062620649,152.524435744 ,
153.887771004,155.227090578,156.537178887,157.896262043,158.827181443 ,
159.456684534,160.086187626,160.594961604,161.025803303,161.43913701 ,
161.863052478,162.317512556,162.844307118,163.540099607,164.428790117 ,
165.317480626,166.124428644,166.958165101,167.881500549,168.963329887 ,
170.367920275,171.487266563,172.32326422,173.159261877,173.925612868 ,
174.458518374,174.991423881,175.553727098,176.214742936,176.860058239 ,
177.505373542,178.172832242,178.994645598,180.282737813,181.977689509 ,
183.418626166,184.777747384,186.113841865,187.430649768,188.788733433 ,
189.673082521,190.305533764,190.810468192,191.31540262,191.75542802 ,
192.169619966,192.589236629,193.033936258,193.537839847,194.172141356 ,
195.30165344,196.226164551,197.035585329,197.876065606,198.81066023 ,
199.912790598,201.371279898,202.721463362,203.499460169,204.277456976 ,
205.09566498,205.662388221,206.229111463,206.838343152,207.295313782 ,
207.752284412,208.380778504,209.055127932,209.894049088,211.253151647 ,
212.897485774,214.321905411,215.67768597,217.012247418,218.330087615 ,
219.689525723,220.524127061,221.158659749,221.659430383,222.160201018 ,
222.598745944,223.012531177,223.431952868,223.880949926,224.387203088 ,
225.025673411,225.942788397,226.859903383,227.669107032,228.49294256 ,
229.400815699,230.451802758,231.78848405,233.248117402,234.044777641 ,
234.84143788,235.609063152,236.019737546,236.430411939,236.995429843 ,
237.590615287,238.253808475,238.917001663,239.558792569,240.300780197 ,
241.324289508,242.719780069,244.11527063,245.476437805,246.81976669 ,
248.146759374,249.472601601,250.838706997,251.746430854,252.269347258 ,
252.792263662,253.257089751,253.677804854,254.091329205,254.523852104 ,
255.005786458,255.577955652,256.383162448,257.216934011,258.050705574 ,
258.858160249,259.711024124,260.671211479,261.818415151,263.408414599 ,
264.377826438,265.347238277,266.131372546,266.788696935,267.446021325 ,
268.012022917,268.657419477,269.30819516,269.958970843,270.620279011 ,
271.425723346,272.65136242,274.418727395,275.881825799,277.245422933 ,
278.582669783,279.899209397,281.256592355,282.164771729,282.795475289 ,
283.426178849,283.933028572,284.363185334,284.776399194,285.200985142 ,
285.656293593,286.184715545,286.884731039,287.777422582,288.670114126 ,
289.477413739,290.312981979,291.239355892,292.326483355,293.746832451 ,
294.528478394,295.310124338,296.273057544,297.047947716,297.667391174 ,
298.286834632,298.85048965,299.425244825,300.0
        ));
        List<Double> expectedY = new ArrayList<Double>(Arrays.asList(
300.0,276.9344,205.290088134,147.89809618,106.064968732 ,
76.0069685042,54.4603471699,39.0209961329,27.9585596925,20.3795502717 ,
14.8550595541,14.9927407142,15.169924223,16.0557347226,20.4821111087 ,
42.5470901578,151.199591648,652.793913103,1978.31601826,2373.82236438 ,
2489.54174611,2420.40618362,2235.6544097,1971.6589243,1659.79799803 ,
1344.7476382,1347.88958121,1371.98877423,1430.45098018,1509.37878153 ,
1599.90137358,1687.03588627,1720.22570099,1685.66995194,1608.30818901 ,
1492.59103752,1338.96400912,1142.54835805,879.918189236,574.547000749 ,
382.875995911,298.485438403,268.556525581,269.749047542,286.359858447 ,
316.380570823,331.691283697,327.913754966,320.660548843,313.275882389 ,
312.971701833,330.362381827,375.86632234,465.207128055,636.276845463 ,
977.279231863,1420.69048372,1845.00941367,2285.09895477,2723.92902986 ,
3165.99276683,3740.34459536,3939.68948334,4038.84285606,4055.63379288 ,
3933.75870354,3555.08728245,3039.91817618,2592.53687859,2116.84709786 ,
1538.3516367,996.192174891,692.347265381,492.44371036,352.183261261 ,
252.18943766,180.613299679,140.677232818,123.632501317,114.087367179 ,
115.395994057,126.551283122,149.1220032,187.647597062,250.247441976 ,
354.681995276,548.01545891,898.753082951,1337.58088044,1775.84405688 ,
2222.32762173,2662.34589628,3058.29568159,3339.60255566,3387.20752632 ,
3347.78751,3315.71754421,3384.36334439,3462.47044147,3551.18700874 ,
3639.59683016,3610.24592779,3307.93896739,2916.64797729,2531.19556128 ,
2108.13006567,1603.27105043,1088.44227063,738.212328677,522.494837274 ,
373.67510194,269.036939783,192.208288791,136.988248172,120.338047431 ,
114.358430301,116.19844806,127.663884059,150.731921295,189.782762633 ,
253.746039932,361.136313821,557.609082626,912.405009775,1354.46590339 ,
1791.01087377,2239.34832151,2679.04057685,3072.86659043,3347.94171935 ,
3387.82735295,3335.89776634,3329.42727568,3434.43685709,3559.16853468 ,
3644.88241645,3610.91654021,3378.79855929,3006.45738833,2625.68850454 ,
2212.93897116,1735.39369636,643.566396956,497.162689733,384.212645444 ,
279.783230612,201.002128567,143.286554948,122.196470198,111.536168141 ,
108.277137854,114.469480024,130.439152677,157.98022768,202.210232504 ,
272.350463588,387.243729592,600.368793472,914.533522748,1286.3078308 ,
1711.24709588,2162.17101989,2609.70527072,3016.48591253,3315.1758936 ,
3375.56014228,3324.76887418,3275.75271878,3319.05335074,3435.29493729 ,
3566.56677392,3606.21339479,3488.89138564,3210.90498704,2852.43895606 ,
2470.98524844,2043.27449842,1512.86998081,973.101384419,675.115274519 ,
480.347552504,344.075565557,248.174622553,176.912496171,141.374327904 ,
123.922673706,114.523703532,116.487702453,128.356162671,151.887108117 ,
191.938221481,256.899939396,365.590092684,569.356034098,927.360766945 ,
1370.86883091,1809.96844801,2256.71559242,2696.12864866,3087.38353953 ,
3355.36579191,3385.99684456,3344.18931616,3323.62674181,3401.92452025 ,
3512.65800318,3617.78420927,3645.73081431,3504.22548226,3206.65838721 ,
2832.19840922,2439.12302317,2002.83170499,1456.43452809,953.017438148 ,
664.662761968,473.387217153,339.262416172,244.218022106,174.148983656 ,
140.821414002,123.476341058,115.331354568,115.102704707,124.545679355 ,
144.926780484,180.39192941,238.190900407,333.513696657,503.869936505 ,
946.199886748,1411.83819819,1853.44919776,2300.87010458,2737.45955413 ,
3120.37829478,3369.30962129,3368.51061381,3327.21993405,3339.18440919 ,
3469.8239102,3591.23870605,3650.67831323,3569.72289518,3404.2955744 ,
3173.59128855,2806.12924492,2410.51914463,1970.02984872,1406.92335038 ,
932.414613788,653.012134843,465.495700038,333.73366343,240.171355672 ,
171.240527337,140.228652743,123.032498775,115.191186942,115.24900925 ,
124.957202361,145.671538899,181.571109436,240.590275623,337.408323527 ,
510.627042722,859.99862418,1306.64240221,1744.467253,2189.60796824 ,
2632.85727544,3034.41817369,3328.10540349,3382.57568767,3340.78268306 ,
3324.15754382,3405.6806984,3489.99961584,3578.84616125,3649.43025623 ,
3589.84393736,3345.62540015,2982.52360625,2600.23506185,2184.57693631 ,
1700.12046498,1200.98462391,847.329420049,602.982214211,431.242159028 ,
309.745759229,222.452728277,158.579184784,128.927250134,117.941957607 ,
114.096042317,119.845679689,135.77581609,164.739449707,212.861669681 ,
292.285385307,427.09741582,696.122364429,1064.43006242,1496.74171852 ,
1938.31923172,2385.19598454,2816.03842221,3181.39035539,3387.9335994 ,
3369.46462298,3322.65427817,3359.07361272,3476.37193352,3612.09732225 ,
3648.5952996,3523.86446689,3234.02202178,2859.31657126,2468.51837849 ,
2036.25037525,1504.49972021,966.630623674,670.396933561,476.927313894 ,
341.700155733,245.990656902,175.429127627,141.005328537,123.632686692 ,
114.401481037,116.574799619,128.647454217,152.437142484,192.899194346 ,
258.465304765,368.222127162,574.551600076,936.152380381,1383.22087451 ,
1822.93011117,2269.87149821,2708.39881907,3097.02792765,3359.51875664 ,
3390.24332436,3363.1550882,3320.44485969,3368.53106065,3485.02454461 ,
3612.06092914,3647.14018641,3543.47911902,3305.63782057
        ));
        assertEquals(resultX.size(), resultY.size());
        assertEquals(expectedX.size(), resultX.size());
        for(int i=0; i < resultX.size(); i++) {
            assertEquals(expectedX.get(i), resultX.get(i), delta);
            assertEquals(expectedY.get(i), resultY.get(i)[0], delta);
        }
    }
    /**
     * Example of ODE. (no delays)
     * Taken from http://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equation
     */
    @Test
    public void testIntegrateLotkaVolterra() {
        final double delta = 1e-6;
        
        class LotkaVolterra implements DDE23.FirstOrderDelayDifferentialEquations {
            double alpha;
            double beta;
            double gamma;
            double delta;

            public LotkaVolterra(double alpha, double beta, double gamma, double delta) {
                this.alpha = alpha;
                this.beta = beta;
                this.gamma = gamma;
                this.delta = delta;
            }
            @Override
            public void computeDerivatives(double t, double[] var, double[][] Z, double[] varPrime) {
                double x = var[0];
                double y = var[1];
                double xPrime = x*(alpha-beta*y);
                double yPrime = -y*(gamma-delta*x);
                varPrime[0] = xPrime;
                varPrime[1] = yPrime;
            }
            @Override
            public int getDimension() {
                return 2;
            }
        }
        // http://www.personal.psu.edu/auk183/LotkaVolterra/LotkaVolterra1.html
        LotkaVolterra eq = new LotkaVolterra(1,0.2,0.5,0.04);
        double[] history = {5,2};
        double[] lags = new double[0];
        DDE23.IntegrationResult sol = DDE23.integrate(eq, lags, history, 0, 50);
        List<Double> solX = sol.getXs();
        List<double[]> solY = sol.getYs();
        List<Double> expectedX = new ArrayList<Double>(Arrays.asList(
0.0,0.133333333333,0.548629036275,0.970410498476,1.40137323032 ,
1.86504839152,2.26347004231,2.58700014259,2.86792519648,3.1279742798 ,
3.38762066825,3.63842618404,3.90886770007,4.14642723839,4.35983375474 ,
4.55507134223,4.75634464569,4.99972537366,5.24694927829,5.49417318292 ,
5.71606832831,5.93291200096,6.1554335199,6.39012753452,6.64296863757 ,
6.92106834775,7.23458702493,7.60121803364,8.06390476943,8.60884000051 ,
9.1537752316,9.63335232605,10.0752184997,10.500922024,10.922572288 ,
11.3524520061,11.8133076225,12.2158374552,12.5418723546,12.824020588 ,
13.0843099219,13.3428483283,13.5936670178,13.8606779221,14.1017278969 ,
14.3150058038,14.5105634006,14.7102943643,14.9481519974,15.1987200837 ,
15.4492881699,15.6718453874,15.8883097501,16.1099826492,16.3434498166 ,
16.5946423599,16.8705295231,17.1809522226,17.5427729726,17.9955933042 ,
18.5529100735,19.1102268428,19.5918414884,20.0341011645,20.4597621069 ,
20.8810208442,21.3099693691,21.7685212077,22.1744131556,22.5024697303 ,
22.785581134,23.0460310736,23.3036499988,23.5545068263,23.8189382323 ,
24.0630926654,24.276345713,24.4721979194,24.6707878725,24.9047016311 ,
25.15790306,25.4111044889,25.6341226809,25.8502442693,26.0712250147 ,
26.3037185687,26.5536216866,26.8277964024,27.1358473311,27.4940356015 ,
27.9396467757,28.5125193266,29.0853918774,29.5676305246,30.0095256492 ,
30.434832811,30.8557326858,31.2842447714,31.7420913187,32.1481347889 ,
32.4762175509,32.7592092208,33.0193822831,33.2764375214,33.527141177 ,
33.7906828639,34.0356018516,34.2486843918,34.444469848,34.6425891647 ,
34.8752590731,35.1289764031,35.3826937331,35.6056191594,35.8214123671 ,
36.0419458406,36.2738798145,36.5230847625,36.7963666099,37.1032152798 ,
37.4596096485,37.901785449,38.6268595183,39.2074709522,39.6760976661 ,
40.1113247779,40.5338742616,40.9551431749,41.3884494911,41.7663514108 ,
42.1442533305,42.4674983273,42.7486892582,43.0079334674,43.2648580302 ,
43.5150891175,43.7798875733,44.022120695,44.2347417071,44.4299125905 ,
44.6283777173,44.8631463513,45.114498892,45.3658514326,45.5879308825 ,
45.8033904241,46.0237621434,46.2556301447,46.5048453927,46.7782163747 ,
47.0852583881,47.442028792,47.8850781519,48.4628031219,49.0405280919 ,
49.5202640459,50.0
        ));

List<Double> expectedY1 = new ArrayList<Double>(Arrays.asList(
5.0,5.42202944556,7.05883587721,9.35096232136,12.555391537 ,
17.2297417017,22.3829907351,27.2286861263,31.598669809,35.2674313381 ,
37.8106587095,38.319051094,35.935009923,31.4033017232,26.1516168719 ,
21.1910691924,16.5625680578,12.0666507291,8.76248366133,6.49076677766 ,
5.09036074029,4.12989784904,3.43695857234,2.92967311953,2.56165686299 ,
2.30618367195,2.15148246283,2.10354245975,2.20917473908,2.56279051869 ,
3.21114952696,4.11229419037,5.32583056724,6.97499699485,9.23732741815 ,
12.3945598245,16.9851245305,22.146674707,27.0146606909,31.4161986448 ,
35.1327547696,37.7564809332,38.4027506388,36.234368126,31.7601988065 ,
26.5425416468,21.5486474846,16.8951530734,12.3998312079,8.95303502873 ,
6.59065872508,5.1540690647,4.17410517002,3.46821010558,2.95142930977 ,
2.57589023319,2.31386457793,2.15260302709,2.09650164911,2.18726049449 ,
2.53252759223,3.18183029313,4.07532436612,5.27648336569,6.90818805953 ,
9.14549418079,12.264775098,16.7884714847,21.9571926178,26.8436239108 ,
31.2710517219,35.0266018965,37.7154057042,38.474179698,36.4758535777 ,
32.0453039147,26.8523707394,21.8305390256,17.1557869917,12.6569104967 ,
9.09714186265,6.6635738561,5.19980043513,4.20546799444,3.49006170079 ,
2.96630525613,2.58522124294,2.31833778154,2.15217959767,2.0899741927 ,
2.16983139692,2.51352112764,3.17603579997,4.07062292658,5.2708588855 ,
6.90103451729,9.13598778514,12.2513261367,16.7668883061,21.9383998946 ,
26.8301328516,31.2649629817,35.0314064186,37.7381154243,38.5282111133 ,
36.5741547,32.1499335321,26.9584465411,21.9237102527,17.2385470713 ,
12.7342614856,9.13981180712,6.68433960512,5.21205212332,4.21312383254 ,
3.49460597802,2.96849243551,2.58543794477,2.31669680181,2.14848851457 ,
2.08349911826,2.15815692459,2.63241611313,3.39876996116,4.37377285766 ,
5.68226110645,7.46330100563,9.9135850919,13.3545078535,17.2932835208 ,
22.1915882643,27.0416912546,31.4561568916,35.1945253387,37.8542690076 ,
38.5633024111,36.4825688545,32.0146366358,26.7935692464,21.7661592733 ,
17.0851894087,12.5744252156,9.05034834066,6.63868825217,5.18195887855 ,
4.19081821078,3.47725242484,2.95457878933,2.57401819017,2.30713662907 ,
2.14035749503,2.07654935856,2.15252129864,2.49380988398,3.15716773091 ,
4.04197554012,5.357553853
));
        List<Double> expectedY2 = new ArrayList<Double>(Arrays.asList(
2.0,1.923703622,1.73238547529,1.60954465318,1.56480772593 ,
1.63192174033,1.83058722194,2.14540435219,2.59466728762,3.22799516964 ,
4.14980087806,5.37505998398,7.03922526007,8.62170134466,9.91056262366 ,
10.8116254434,11.375032372,11.5655891678,11.3195197189,10.7802520368 ,
10.1538222143,9.48024412551,8.7711678929,8.03558614275,7.27989199816 ,
6.50801070071,5.72080849623,4.912799464,4.05569816023,3.25155921234 ,
2.63509120959,2.22275495515,1.9358612057,1.73605141457,1.61032367648 ,
1.56201976277,1.62259250867,1.81515248117,2.1236111574,2.56461282645 ,
3.1858642624,4.08699544416,5.29436803248,6.92352426518,8.53331555044 ,
9.84001169492,10.7679555466,11.3561569715,11.5790790262,11.3586648905 ,
10.8257860312,10.202221434,9.53098949484,8.82366244935,8.08936948212 ,
7.33465675986,6.56360908527,5.77735011163,4.9710767003,4.11959253521 ,
3.28426768693,2.64709145269,2.22984071955,1.94032123904,1.73836342341 ,
1.61044481006,1.55930021325,1.61467291775,1.80225663027,2.1055295623 ,
2.53979821522,3.15123606754,4.03572260379,5.22879063237,6.83099706836 ,
8.46463807942,9.78587835855,10.7352540986,11.3428078261,11.5900709947 ,
11.3898310658,10.8616543184,10.2401118821,9.57057823117,8.86451575112 ,
8.13114741179,7.37713162159,6.60666983232,5.82107190408,5.01602066578 ,
4.16843790006,3.30077822765,2.64357195173,2.22615169007,1.93715795372 ,
1.73550094678,1.60767417552,1.55636546617,1.61103710193,1.79766946322 ,
2.09973821813,2.53231441659,3.1411828665,4.02118082881,5.2110952635 ,
6.80714032111,8.44942651472,9.77605565344,10.7325727796,11.3464421192 ,
11.6011645305,11.4071409487,10.8805246673,10.259642513,9.59063266636 ,
8.884942364,8.15183029876,7.39799521135,6.6276834407,5.84228346259 ,
5.03769339272,4.19177192398,3.12287930422,2.50329562783,2.12869814406 ,
1.86775202897,1.68824279959,1.58139641642,1.55528398362,1.62100465072 ,
1.80611666177,2.11118463941,2.5489040895,3.16521033423,4.05739334159 ,
5.25957231558,6.87746633461,8.50652512677,9.82617028658,10.7707002071 ,
11.3736864685,11.6140400589,11.4075732378,10.8785240196,10.2566363099 ,
9.58667453671,8.88023071226,8.1465319807,7.3922280805,6.62152280142 ,
5.83575702763,5.03073859527,4.1839959501,3.30511376997,2.64086434491 ,
2.22486153153,1.91391834763
        ));
        assertEquals(solX.size(), solY.size());
        assertEquals(expectedX.size(), solX.size());
        for(int i=0; i < solX.size(); i++) {
            assertEquals(expectedX.get(i), solX.get(i), delta);
            assertEquals(expectedY1.get(i), solY.get(i)[0], delta);
            assertEquals(expectedY2.get(i), solY.get(i)[1], delta);
        }
    }
    @Test
    public void testddevalExample1() {
        DDE23.FirstOrderDelayDifferentialEquations ddes = new DDE23.FirstOrderDelayDifferentialEquations(){
            @Override
            public void computeDerivatives(double t, double[] y, double[][] Z, double[] yPrime) {
                double[] ylag1 = Z[0];
                double[] ylag2 = Z[1];
                yPrime[0] = ylag1[0];
                yPrime[1] = ylag1[0] + y[1]; // FIXME: gets out of bounds here
                yPrime[2] = ylag2[1];
            }
            @Override
            public int getDimension() {
                return 3;
            }
        };
        double[] lags = {1.0, 0.2};
        double[] history = {1.0, 1.0, 1.0};
        double tspan = 5.0;
        DDE23.IntegrationResult result = DDE23.integrate(ddes, lags, history, 0, tspan);

        {
            double delta = 1e-3;
            double[] x = {0.2};
            double[][] y = {{1.2, 1.4427, 1.2}};
            double[][] r = result.ddeval(x, null);
            assertArrayEquals(y[0], r[0], delta);
        }
        {
            double delta = 1e-6;
            double[] x = {3.141592};
            double[][] y = {{6.68276956078, 50.9454549317, 36.3096579681}};
            double[][] r = result.ddeval(x, null);
            assertArrayEquals(y[0], r[0], delta);
        }
    }
}