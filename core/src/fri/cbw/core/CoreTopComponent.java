/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fri.cbw.core;

import fri.cbw.ToolGraph.ToolGraphSceneImpl;
import fri.cbw.ToolPalette.ToolTypeNodeFactory;
import java.awt.BorderLayout;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.TransferHandler;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//fri.cbw.core//Core//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "CoreTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "fri.cbw.core.CoreTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_CoreAction",
preferredID = "CoreTopComponent")
@Messages({
    "CTL_CoreAction=Core",
    "CTL_CoreTopComponent=Core Window",
    "HINT_CoreTopComponent=This is a Core window"
})
public final class CoreTopComponent extends TopComponent {
    
    //private ToolTransferHandler th = new ToolTransferHandler();
    
    public CoreTopComponent() {
        initComponents();
        setName(Bundle.CTL_CoreTopComponent());
        setToolTipText(Bundle.HINT_CoreTopComponent());
        
        
        Node root = new AbstractNode(Children.create(new ToolTypeNodeFactory(), false));
        PaletteActions a = new MyPaletteActions();
        PaletteController p = PaletteFactory.createPalette(root, a);
        associateLookup(Lookups.fixed(p));
        
        
        ToolGraphSceneImpl scene = new ToolGraphSceneImpl();
        JComponent view = scene.createView();
        scenePanel.setViewportView(view);
        add(scene.createSatelliteView(), BorderLayout.EAST);
    }
    
    /*
    private final class ToolTransferHandler extends TransferHandler{
        
        @Override
        public boolean canImport(TransferSupport support){
            return support.isDataFlavorSupported(Tool.DATA_FLAVOR);
        }
        
        @Override
        public boolean importData(TransferSupport support){
            try {
                Tool tool = (Tool) support.getTransferable().getTransferData(Tool.DATA_FLAVOR);
                
                //jScrollPane1.add(this);
                
                return true;
            } catch (UnsupportedFlavorException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
            return false;
        }
    }
    */
    
    
    
    private static final class MyPaletteActions  extends PaletteActions {
      
      @Override
      public Action[] getImportActions() {
         return new Action[]{};
      }
      
      @Override
      public Action[] getCustomPaletteActions() {
         return new Action[]{};
      }
      
      @Override
      public Action[] getCustomCategoryActions(Lookup arg0) {
         return new Action[]{};
      }
      
      @Override
      public Action[] getCustomItemActions(Lookup arg0) {
         return new Action[]{};
      }
      
      @Override
      public Action getPreferredAction(Lookup arg0) {
         return new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent arg0) {
               throw new UnsupportedOperationException("Not supported yet.");
            }
         };
      }
   }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scenePanel = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(scenePanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scenePanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
